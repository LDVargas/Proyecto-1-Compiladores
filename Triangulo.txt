Program		::=	 (Package-Declaration ";")* Command

Command		::=  	 |  Command ; single-Command

single-Command	::= 
			 |  V-name := Expression
			 |  Long-Identifier "(" Actual-Parameter-Sequence ")
			    "nothing"
			 |  "let"Declaration "in"Command"end"
			 |  "if"Expression "then"Command ("elsif"Expression "then"Command)*
			    "else"Command "end"
			 |  "choose" Expression "from" Cases "end"
			 |  "loop" "while" Expression "do" Command "end"
			 |  "loop" "until" Expression "do" Command "end"
			 |  "loop" "do" Command "while" Expression "end"
			 |  "loop" "do" Command "until" Expression "end"
			 |  "loop" "for" Identifier "from"Expression "to" Expression "do" Command "end"
			 |  "loop" "for" Identifier "from"Expression "to" Expression"while" Expression "do" Command "end"
			 |  "loop" "for" Identifier "from"Expression "to" Expression"until" Expression "do" Command "end"

Expression		::= secondary-Expression
			 |  let Declaration in Expression
			 |  if Expression then Expression else Expression

secondary-Expression	::= primary-Expression
			 |  secondary-Expression Operator primary-Expression

primary-Expression 	::= Integer-Literal
			 |  Character-Literal
			 |  V-name
			 |  Long-Identifier "(" Actual-Parameter-Sequence ")
			 |  Operator primary-Expression
			 |  ( Expression )
			 |  { Record-Aggregate }
			 |  [ Array-Aggregate ]

Record-Aggregate	::= Identifier ~ Expression
			 |  Identifier ~ Expression , Record-Aggregate

Array-Aggregate	::= Expression
			 |  Expression , Array-Aggregate

Package-Declaration	 ::= "package" Package-Identifier "~"
					   Declaration "end"
Package-Identifier	 ::= Identifier
Long-Identifier		 ::= [ Package-Identifier "$" ] Identifier

V-name			 ::= [ Package-Identifier "$" ] Var-Name

Var-name	 	 ::= Identifier
			 |  V-name "." Identifier
			 |  V-name "[" Expression "]"

Declaration		::= compound-Declaration
			 |   Declaration ";"compound-Declaration

single-Declaration
			 ::= const Identifier ~ Expression
			 |  var Identifier : Type-denoter
			 |  proc Identifier ( Formal-Parameter-Sequence ) 
			 	 "~" Command "end" 
			 |"var" Identifier ":="Expression

compound-Declaration	::= single-Declaration
			|"recursive" Proc-Funcs "end"
			|"private" Declaration "in" Declaration "end"

single-Command
			 |  func Identifier ( Formal-Parameter-Sequence )
				: Type-denoter ~ Expression
			 |  type Identifier ~ Type-denoter

Formal-Parameter-Sequence
			::= 
			 |  proper-Formal-Parameter-Sequence

proper-Formal-Parameter-Sequence
			::= Formal-Parameter
			 |  Formal-Parameter , proper-Formal-Parameter-Sequence

Formal-Parameter	::= Identifier : Type-denoter
			 |  var Identifier : Type-denoter
			 |  proc Identifier ( Formal-Parameter-Sequence )
			 |  func Identifier ( Formal-Parameter-Sequence )
				: Type-denoter

Actual-Parameter-Sequence
			::= 
			 |  proper-Actual-Parameter-Sequence

proper-Actual-Parameter-Sequence
			::= Actual-Parameter
			 |  Actual-Parameter , proper-Actual-Parameter-Sequence

Actual-Parameter	::= Expression
			 |  var V-name
			 |  proc Identifier
			 |  func Identifier

Type-denoter		 ::= Long-Identifier
			 |  "array" Integer-Literal "of" Type-denoter
			 |  "record" Record-Type-denoter "end"

Record-Type-Denoter	
			::= Identifier : Type-denoter
			 |  Identifier : Type-denoter , Record-Type-denoter

Cases		::= Case+ [ ElseCase ]
Case		::= "when" Case-Literals "then" Command
ElseCase	::= "else" Command
Case-Literals	::= Case-Range ("|" Case-Range)*
Case-Range	::= Case-Literal [".." Case-Literal]
Case-Literal	::= Integer-Literal | Character-Literal

Program		::= (Token|Comment|Blank)*

Token			::= Integer-Literal|Character-Literal|Identifier|Operator|
		 	    array|const|do|else|end|
			    func|if|in|let|of|proc|record|
			    then|type|var|while|choose|elsif|for|from|loop|
			    nothing|package|private|recursive|to|until|when|
			    .|:|;|,|:=|~|(|)|[|]|{|}|$|..

Integer-Literal	::= Digit Digit* 

Character-Literal	::= 'Graphic'

Identifier		::= Letter(Letter|Digit)* 

Operator		::= Op-character Op-Character*

Comment		::= ! Graphic* end-of-line 

Blank			::= space|tab|end-of-line 

Graphic		::= Letter|Digit|Op-character|space|tab|.|:|;|,|
			    ~|(|)|[|]|{|}|_|||!|'|`|"|#|$	

Letter		::= a|b|c|d|e|f|g|h|i|j|k|l|m|
    n|o|p|q|r|s|t|u|v|w|x|y|z|
    			    A|B|C|D|E|F|G|H|I|J|K|L|M|
    N|O|P|Q|R|S|T|U|V|W|X|Y|Z

Digit			::= 0|1|2|3|4|5|6|7|8|9	

Op-character	::= +|-|*|/|=|<|>|\|&|@|%|^|?	

Programa
	<Program>

Comandos
<AssignCommand>
<CallCommand>
<EmptyCommand/>
<IfCommand>
<LetCommand>
<SequentialCommand> 
<WhileDoCommand> 
<DoWhileCommand>
<UntilDoCommand>
<DoUntilCommand>
<RepeatVarCommand>
<RepeatVarDeclCommand>
<RepeatLoopCommand>
<ReturnCommand/>

Expresiones
<ArrayExpression>
<BinaryExpression>
<CallExpression>
<CharacterExpression>
<EmptyExpression/>
<IfExpression>
<IntegerExpression>
<LetExpression>
<RecordExpression>
<UnaryExpression>
<VnameExpression>

Declaraciones
<BinaryOperatorDeclaration>
<ConstDeclaration>
<FuncDeclaration>
<ProcDeclaration>
<SequentialDeclaration>
<TypeDeclaration>
<UnaryOperatorDeclaration>
<VarDeclaration>
<ProcFuncsDeclaration>
<RecDeclaration>
<PrivateDeclaration>

Array Aggregates (Agregados de una colección)
<MultipleArrayAggregate>
<SingleArrayAggregate>
<MultipleRecordAggregate>
<SingleRecordAggregate>

Parámetros Formales
<ConstFormalParameter>
<FuncFormalParameter>
<ProcFormalParameter>
<VarFormalParameter>
<EmptyFormalParameterSequence/>
<MultipleFormalParameterSequence>
<SingleFormalParameterSequence>

Parámetros actuales
<ConstActualParameter>
<FuncActualParameter>
<ProcActualParameter>
<VarActualParameter>
<EmptyActualParameterSequence/>
<MultipleActualParameterSequence>
<SingleActualParameterSequence>

Especificadores de Tipos
<AnyTypeDenoter/>
<ArrayTypeDenoter>
<BoolTypeDenoter/>
<CharTypeDenoter/>
<ErrorTypeDenoter/>
<SimpleTypeDenoter>
<IntTypeDenoter/>
<RecordTypeDenoter>
<MultipleFieldTypeDenoter>
<SingleFieldTypeDenoter>


Identificadores, literales y operadores4
<Identifier value=""/>
<IntegerLiteral value=""/>
<Operator value=""/>


Nombres de variables o valores
<DotVname>
<SimpleVname>
<SubscriptVname>
